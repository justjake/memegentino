// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  avatarUrl String?

  tokens            Token[]
  sessions          Session[]
  notionOAuthTokens NotionOAuthToken[]
  memes             Meme[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model NotionOAuthToken {
  bot_id         String  @id // @db.uuid
  userId         Int
  workspace_id   String
  workspace_name String?
  workspace_icon String?
  access_token   String
  token_type     String // not really needed, but makes it easier to save the API response directly.
  owner          String // Json
  User           User    @relation(fields: [userId], references: [id])

  GeneratedImage Meme[]
  @@unique([workspace_id, userId])
}

model Meme {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByUser      User             @relation(fields: [createdByUserId], references: [id])
  createdByUserId    Int
  createdWithToken   NotionOAuthToken @relation(fields: [createdWithTokenId], references: [bot_id])
  createdWithTokenId String

  topText           String? // eg "how do you do"
  bottomText        String? // eg "fellow kids"
  effects           String? // eg "sushihat"
  sourceBlockId     String // @db.uuid
  sourceWorkspaceId String // @db.uuid

  // Blob storage in the DB ðŸ¤·
  mimeType String
  data     Bytes

  allowPublic        Boolean? // anyone on the internet can view
  allowWorkspace     Boolean? // only people logged in with the same workspace can view
  allowBySourceBlock Boolean? // OK if the reader is in the workspace and can read the source block

  @@map("GeneratedImage")
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }
